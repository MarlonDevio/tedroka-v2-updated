<header class="relative px-2 py-1 bg-primary md:px-5 md:py-3">
  <nav class="flex justify-between"></nav>
  <div class="px-3 mx-auto sm:px-3">
    <div class="py-4">
      <!-- NAVIGATION MENU -->
      <nav class="flex items-center justify-between uppercase navigation-bar lg:text-sm xl:text-base 2xl:text-xl">
        {% comment %} First block {% endcomment %}
        <div class="text-white lg:hidden">x</div>
        <ul class="items-center justify-between hidden nav-links-container lg:flex">
          {% for link in linklists['main-menu-navigation-links'].links %}
            {% if link.type == 'collection_link' %}
              {% assign collection = collections[link.handle] %}
              <li class="px-2 link-with-sublinks">
                <a class="main-menu-link relative flex items-center gap-2 p-1.5 text-white" href="{{ collection.url }}">
                  {{- collection.title -}}
                  {%- render 'chevron-svg' %}
                </a>

                <!-- SUB MENU CONTAINER -->
                <div class="sub-menu-container absolute left-0 top-[70%] hidden min-h-[25rem] w-full gap-5 bg-primary px-32 py-10">
                  <ul class="flex flex-col gap-5 basis-1/2">
                    <!-- display products in submenu -->
                    {% for product in collection.products %}
                      <li>
                        <a class="text-white" href="{{ product.url }}">
                          {{- product.title -}}
                        </a>
                      </li>
                    {% endfor %}
                  </ul>

                  <ul class="flex flex-col gap-5 basis-1/2">
                    {% for product in collection.products %}
                      <li class="text-white">
                        <a href="#">TO DO</a>
                      </li>
                    {% endfor %}
                  </ul>
                </div>
              </li>
            {% else %}
              <li class="px-2">
                <a class="main-menu-link flex p-1.5 text-white" href="{{ link.url }}">
                  {{- link.title -}}
                </a>
              </li>
            {% endif %}
          {% endfor %}
          <div class="px-5">{% render 'logo' %}</div>
        </ul>

        {% comment %}Second block{% endcomment %}
        <ul class="flex gap-2 nav-links-container justify-self-end">
          <li class="flex items-center px-2">
            <a class="main-menu-link flex p-1.5 text-white" href="{{ routes.cart_url }}">
              {%- render 'cart-svg' -%}
            </a>
          </li>
          <li class="flex items-center px-2">
            <a class="main-menu-link flex p-1.5 text-white" href="{{ routes.search_url }}">
              {%- render 'search-svg' -%}
            </a>
          </li>
          <li class="flex items-center px-2">
            <a class="main-menu-link flex p-1.5 text-white" href="https://tedroka.nl/apps/parcelpanel">
              {% render 'track-order-svg' %}
            </a>
          </li>
        </ul>
      </nav>
    </div>
  </div>
  <script>
    const mainMenuLinks = document.querySelectorAll('.main-menu-link');
    const linkWithSublinks = document.querySelectorAll('.link-with-sublinks');

    handleHoverState(linkWithSublinks);

    // functions
    function handleHoverState(items) {
      items.forEach((item) => {
        const mainMenuLink = item.querySelector('.main-menu-link');
        const subMenuContainer = item.querySelector('.sub-menu-container');
        let timer;

        item.addEventListener('mouseenter', () => {
          clearTimeout(timer); // Clear any existing timer
          mainMenuLink.classList.add('hovered-main-menu-link');
          subMenuContainer?.classList.remove('hidden');
          subMenuContainer?.classList.add('flex');
        });

        item.addEventListener('mouseleave', () => {
          // Start a timer to hide the submenu, allowing time to move to submenu
          timer = setTimeout(() => {
            mainMenuLink.classList.remove('hovered-main-menu-link');
            subMenuContainer?.classList.add('hidden');
          }, 100); // Delay can be adjusted based on preference
        });

        subMenuContainer?.addEventListener('mouseenter', () => {
          clearTimeout(timer); // Clear the timer if moving into the submenu
        });

        subMenuContainer?.addEventListener('mouseleave', () => {
          // Start the timer when leaving the submenu
          timer = setTimeout(() => {
            mainMenuLink.classList.remove('hovered-main-menu-link');
            subMenuContainer?.classList.add('hidden');
          }, 100);
        });
      });
    }
  </script>
</header>
